const md5 = require('md5');
const cfg = require('configuration');
const client = require('ircclient');
const repl = require('repl');
let db = require('database');


function output(to, message){
	client.say(to, message);
}

function error(nick, error){
	console.log(error);
	output(nick, "Error : "+error);
}

function getTimestamp(){
	return Math.floor(Date.now()/1000);
}

class Player{
	constructor(nick, login, password){
		this.id = null;
		this.login = null;
		this.password = null;
		this.nick = null;
		this.level = 1;
		this.gold = 0;
		this.createdAt = getTimestamp();
		this.pickaxeId = null;
		this.guildId = null;

		if (arguments.length === 1){
			this.id = arguments[0].id || arguments[0].rowid;
			this.login = arguments[0].login;
			this.password = arguments[0].password;
			this.nick = arguments[0].nick;
			this.level = arguments[0].level;
			this.gold = arguments[0].gold;
			this.pickaxeId = arguments[0].pickaxeId;
			this.guildId = arguments[0].guildId;
			this.createdAt = arguments[0].createdAt;
		}else if (arguments.length === 3){
			this.login = login;
			this.password = md5(login+password);
			this.nick = nick;
		}
	}

	static init(){
		db.run("CREATE TABLE IF NOT EXISTS Player "+
			"(login TEXT UNIQUE, password TEXT, nick TEXT, gold REAL, "+
			"level REAL, pickaxeId INTEGER, guildId INTEGER, createdAt INTEGER)"
		);
	}

	static connect(nick, login, password){
		db.get("SELECT * FROM Player WHERE login=$login AND password=$password", {$login: login, $password: md5(login+password)}, function(err, row){
			if (err){
				error(nick, err);
			}else if(row){
				player = new Player(row);
				player.nick = nick;
				Player.save(player);
				output(nick, "You are now connected");
			}else{
				output(nick, "No account was found with this login and password");
			}
		})
	}

	static register(nick, login, password){
		if (login.length < 2 || password.length < 2){
			output(nick, "Login or password too short");
		}else{
			Player.save(new Player(nick, login, password), function(err){
				if (err){
					if (err.errno === 19)
						output(nick, "Login already used");
					else
						error(nick, err);
				}else{
					output(nick, "You are now registered and connected");
				}
			});
		}
	}

	static updateNick(oldNick, newNick){
		db.run("UPDATE Player SET nick=$newNick WHERE nick=$oldNick", {$newNick: newNick, $oldNick: oldNick});
	}

	static mine(nick, duration){
		
	}

	static loadByNick(nick, callback){
		db.get("SELECT * FROM Player WHERE nick=?", nick, function(err, row) {
			if (err){
				console.log(err);
			}else{
				let player = null;
				if (!err){
					player = new Player(row);
				}
				callback(err, player);
			}
		});
	}

	static loadById(id, callback){
		db.get("SELECT * FROM Player WHERE rowid=?", id, function(err, row) {
			let player = null;
			if (err){
				console.log(err);
			}else{
				player = new Player(row);
			}
			callback(err, player);
		});
	}

	static save(player, callback){
		if (player.id !== null){
			db.run("UPDATE Player SET "+
				"nick=$nick, "+
				"gold=$gold, "+
				"level=$level, "+
				"pickaxeId=$pickaxeId, "+
				"guildId=$guildId "+
				" WHERE rowid=$id",
				{$nick: player.nick, $gold: player.gold, $level: player.level, $pickaxeId: player.pickaxeId, $id: player.id, $guildId: player.guildId},
				callback
			);
		}else{
			db.run("INSERT INTO Player (nick, login, password, gold, level, pickaxeId, guildId, createdAt) VALUES ("+
				"$nick, $login, $password, $gold, $level, $pickaxeId, $guildId, $createdAt)",
				{
					$nick: player.nick,
					$login: player.login,
					$password: player.password,
					$gold: player.gold,
					$level: player.level,
					$pickaxeId: player.pickaxeId,
					$guildId: player.guildId,
					$createdAt: player.createdAt
				},
				callback
			);
		}
	}
}

class Pickaxe{
	constructor(){
		this.name;

		//Stats
		this.power;
		this.maxDurability;
		this.durability;

		//Infos
		this.initialInvestment;
		this.repairInvesment;
		this.repairCount;
		this.totalGoldMined;
		this.createdAt;
		this.creatorId;
		this.ownerId;
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class TypeAction{
	/*
		Mining, dungeon, adventure...
	*/
	constructor(code, name){
		this.rowid = arguments[0].rowid || null;
		this.name = arguments[0].name || name;
		this.code = arguments[0].code || code;
	}

	static init(){
		db.run("CREATE TABLE IF NOT EXISTS TypeAction (code TEXT UNIQUE, name TEXT");
		TypeAction.insert("MINE", "Mining", err => false /*ignore unique code error*/);
		TypeAction.insert("DUNG", "Dungeon", err => false);
		TypeAction.insert("ADVE", "Adventure", err => false);
	}

	static insert(code, name, callback){
		db.run("INSERT INTO TypeAction (code, name) VALUES ($code, $name)",
			{$code: code, $name: name},
			callback
		);
	}

	static load(id, callback){
		db.get("SELECT * FROM TypeAction WHERE rowid=?", id, function(err, row) {
			let typeAction = null;
			if (err){
				console.log(err);
			}else{
				typeAction = new TypeAction(row);
			}
			callback(err, typeAction);
		});
	}
}

class TemporalAction{
	/*
		Loots are created at the end of a temporal action
	*/
	constructor(){
		this.id;
		this.typeActionId;
		this.message;
		this.startDate = getTimestamp();
		this.duration;

		if (arguments.length === 1){
			this.id = arguments[0].id || arguments[0].rowid;
			this.typeActionId = arguments[0].typeActionId;
			this.message = arguments[0].message;
			this.startDate = arguments[0].startDate;
			this.duration = arguments[0].duration;
		}
	}

	static init(){
		db.run("CREATE TABLE IF NOT EXISTS TemporalAction (typeActionId INTEGER, message TEXT, startDate INTEGER, duration INTEGER");
	}

	static save(){
		
	}

	static load(id, callback){
		db.get("SELECT * FROM TemporalAction WHERE rowid=?", id, function(err, row) {
			let temporalAction = null;
			if (err){
				console.log(err);
			}else{
				temporalAction = new TemporalAction(row);
			}
			callback(err, temporalAction);
		});
	}
}

class PlayerTemporalAction{
	/*
		A player can only have one temporal action at any time
	*/
	constructor(){
		this.temporalActionId;
		this.playerId;
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class Loot{
	constructor(){
		this.temporalActionId;
		this.message;
		this.availableAt;
		this.claimed;
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class GoldLoot{
	constructor(){
		this.temporalActionId;
		this.message;
		this.gold;
		this.availableAt;
		this.claimed;
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class PickaxeLoot{
	constructor(){
		this.temporalActionId;
		this.message;
		this.pickaxeId;
		this.availableAt;
		this.claimed;
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class Event{
	constructor(){
		this.message;
		this.startDate;
		this.duration;
		this.finished;
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class Guild{
	constructor(){
		
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class Group{

}

class PlayerGroup{
	
}

(function test(){
	//repl.start('> ').context.Player = Player;
	db.resetDatabase(function(newDb){
		db = newDb;
		Player.init();
		let noli = new Player("Noli", "noli", "alsea");
		Player.save(noli);
		Player.save(noli);
		Player.loadByNick(noli.nick, function(err, player){
			Player.save(player);
		});
	});
})()