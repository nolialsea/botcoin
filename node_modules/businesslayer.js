const md5 = require('md5');
const cfg = require('configuration');
const client = require('ircclient');
const repl = require('repl');
let db = require('database');

function output(args){
	if (arguments.length === 2){
		client.say(arguments[0], arguments[1]);
	}
	//output(message)
	else if (arguments.length === 1){
		client.say(cfg.channels[0], arguments[0]);
	}
}

function error(nick, error){
	console.log(error);
	output(nick, "Error : "+error);
}

function getTimestamp(){
	return Math.floor(Date.now()/1000);
}

class Player{
	constructor(nick, login, password){
		this.id = null;
		this.login = null;
		this.password = null;
		this.nick = null;
		this.level = 1;
		this.gold = 0;
		this.createdAt = getTimestamp();
		this.pickaxeId = null;
		this.guildId = null;

		if (arguments.length === 1){
			this.id = arguments[0].id || arguments[0].rowid;
			this.login = arguments[0].login;
			this.password = arguments[0].password;
			this.nick = arguments[0].nick;
			this.level = arguments[0].level;
			this.gold = arguments[0].gold;
			this.pickaxeId = arguments[0].pickaxeId;
			this.guildId = arguments[0].guildId;
			this.createdAt = arguments[0].createdAt;
		}else if (arguments.length === 3){
			this.login = login;
			this.password = md5(login+password);
			this.nick = nick;
		}
	}

	static init(){
		db.run("CREATE TABLE IF NOT EXISTS Player "+
			"(login TEXT UNIQUE NOT NULL, password TEXT NOT NULL, nick TEXT, gold REAL NOT NULL, "+
			"level REAL NOT NULL, pickaxeId INTEGER, guildId INTEGER, createdAt INTEGER NOT NULL)"
		);
	}

	static connect(nick, login, password){
		Player.isConnected(nick, function(connected){
			if (connected){
				output(nick, "You are already connected");
			}else{
				let r = db.get("SELECT rowid, * FROM Player WHERE login=? AND password=?", [login, md5(login+password)])

				if (r && r.length > 0){
					Player.updateNick(row.rowid, nick);
					output(nick, "You are now connected");
				}else{
					output(nick, "No account was found with this login and password");
				}
			}
		});
	}

	static disconnectAll(){
		db.run("UPDATE Player SET nick=null");
	}

	static isConnected(nick){
		let r = db.get("SELECT rowid, * FROM Player WHERE nick=?", [nick]);
		return r.length === 0 ? false : true;
	}

	static register(nick, login, password){
		if (login.length < 2 || password.length < 2){
			output(nick, "Login or password too short");
		}else{
			Player.save(new Player(nick, login, password), function(err){
				if (err){
					if (err.errno === 19)
						output(nick, "Login already used");
					else
						error(nick, err);
				}else{
					output(nick, "You are now registered and connected");
				}
			});
		}
	}

	static updateNick(arg0, newNick){
		let typeOfArg0 = typeof arg0;
		if (typeOfArg0 === "string"){
			db.run("UPDATE Player SET nick=$newNick WHERE nick=$oldNick",
				{$newNick: newNick, $oldNick: arg0});
		}else if (typeOfArg0 === "number"){
			db.run("UPDATE Player SET nick=$newNick WHERE rowid=$rowid",
				{$newNick: newNick, $rowid: arg0});
		}
	}

	static removeNick(nick){
		db.run("UPDATE Player SET nick=null WHERE nick=?", nick);
	}

	static mine(nick, duration){
		Player.isConnected(nick, function(connected, player){
			if (!connected){
				output(nick, "You should be connected to use this command");
			}else{
				console.log("Player : "+JSON.stringify(player));
				let timestamp = Math.floor(Date.now()/1000);
				let query = "SELECT * FROM PlayerTemporalAction "+
					"JOIN TemporalAction ON "+
					"PlayerTemporalAction.temporalActionId = TemporalAction.rowid "+
					"AND "+
					"TemporalAction.startDate+TemporalAction.duration < $timestamp "+
					"AND "+
					"PlayerTemporalAction.playerId = $playerId";
				db.get(query, {$timestamp: timestamp, $playerid: player.id}, function(err, row){
					if (err){
						error(nick, err);
					}else if (row){
						output(nick, "You already have an action in process");
					}else{

						let temporalAction = new TemporalAction(1, timestamp, Date, duration);
						
						output(nick, "You started mining... (not really)");
					}
				})
			}
		});
	}

	static load(property, value, callback){
		db.get("SELECT rowid, * FROM Player WHERE "+property+"=?", value, function(err, row) {
			if (err){
				console.log(err);
			}else{
				let player = null;
				if (!err){
					if (row){
						player = new Player(row);
					}
				}
				callback(err, player);
			}
		});
	}

	static save(player, callback){
		if (player.id){
			db.run("UPDATE Player SET "+
				"nick=$nick, "+
				"gold=$gold, "+
				"level=$level, "+
				"pickaxeId=$pickaxeId, "+
				"guildId=$guildId "+
				" WHERE rowid=$id",
				{
					$nick: player.nick, $gold: player.gold,
					$level: player.level, $pickaxeId: player.pickaxeId,
					$id: player.id, $guildId: player.guildId
				},
				callback
			);
		}else{
			db.run("INSERT INTO Player (nick, login, password, gold, level, "+
				"pickaxeId, guildId, createdAt) VALUES ("+
				"$nick, $login, $password, $gold, $level, "+
				"$pickaxeId, $guildId, $createdAt)",
				{
					$nick: player.nick,
					$login: player.login,
					$password: player.password,
					$gold: player.gold,
					$level: player.level,
					$pickaxeId: player.pickaxeId,
					$guildId: player.guildId,
					$createdAt: player.createdAt
				},
				callback
			);
		}
	}
}

class Pickaxe{
	constructor(){
		this.name;

		//Stats
		this.power;
		this.maxDurability;
		this.durability;

		//Infos
		this.initialInvestment;
		this.repairInvesment;
		this.repairCount;
		this.totalGoldMined;
		this.createdAt;
		this.creatorId;
		this.ownerId;
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class TypeAction{
	/*
		Mining, dungeon, adventure...
	*/
	constructor(code, name){
		this.id = arguments[0].rowid || null;
		this.name = arguments[0].name || name;
		this.code = arguments[0].code || code;
	}

	static init(){
		db.run("CREATE TABLE IF NOT EXISTS TypeAction (code TEXT UNIQUE, name TEXT)");
		TypeAction.insert("MINE", "Mining", err => false /*ignore unique code error*/);
		TypeAction.insert("DUNGEON", "Dungeon", err => false);
		TypeAction.insert("ADVENTURE", "Adventure", err => false);
	}

	static insert(code, name, callback){
		db.run("INSERT INTO TypeAction (code, name) VALUES ($code, $name)",
			{$code: code, $name: name},
			callback
		);
	}

	static load(property, value, callback){
		db.get("SELECT rowid, * FROM TypeAction WHERE "+property+"=?", value, function(err, row) {
			let typeAction = null;
			if (err){
				console.log(err);
			}else{
				typeAction = new TypeAction(row);
			}
			callback(err, typeAction);
		});
	}
}

class TemporalAction{
	/*
		Loots are created at the end of a temporal action
	*/
	constructor(typeActionId, message, startDate, duration){
		this.id;
		this.typeActionId;
		this.message;
		this.startDate = getTimestamp();
		this.duration;

		this.id = arguments[0].id || arguments[0].rowid || null;
		this.typeActionId = arguments[0].typeActionId || typeActionId;
		this.message = arguments[0].message || message;
		this.startDate = arguments[0].startDate || startDate;
		this.duration = arguments[0].duration || duration;
	}

	static init(){
		db.run("CREATE TABLE IF NOT EXISTS TemporalAction (typeActionId INTEGER NOT NULL,"+
			"message TEXT, startDate INTEGER NOT NULL, duration INTEGER NOT NULL)");
	}

	static save(temporalAction, callback){
		//Only inserts
		if (!temporalAction.id){
			db.run("INSERT INTO TemporalAction (typeActionId, message, startDate, duration) VALUES ("+
				"$typeActionId, $message, $password, $startDate, $duration)",
				{
					$typeActionId: temporalAction.typeActionId,
					$message: temporalAction.message,
					$startDate: temporalAction.startDate,
					$duration: temporalAction.duration
				},
				callback
			);
		}
	}

	static load(property, value, callback){
		db.get("SELECT rowid, * FROM TemporalAction WHERE $property=$value", {$property: property, $value: value}, function(err, row) {
			let temporalAction = null;
			if (err){
				console.log(err);
			}else{
				temporalAction = new TemporalAction(row);
			}
			callback(err, temporalAction);
		});
	}

	static loadById(id, callback){
		TemporalAction.load("rowid", id, callback);
	}
}

class PlayerTemporalAction{
	/*
		A player can only have one temporal action at any time
	*/
	constructor(){
		this.temporalActionId;
		this.playerId;
	}

	static init(){
		db.run("CREATE TABLE IF NOT EXISTS PlayerTemporalAction (temporalActionId INTEGER NOT NULL,"+
			"playerId INTEGER NOT NULL)");
	}

	static save(){

	}

	static load(){

	}
}

class Loot{
	constructor(){
		this.temporalActionId;
		this.message;
		this.availableAt;
		this.claimed;
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class GoldLoot{
	constructor(){
		this.lootId;
		this.message;
		this.gold;
		this.availableAt;
		this.claimed;
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class PickaxeLoot{
	constructor(){
		this.lootId;
		this.message;
		this.pickaxeId;
		this.availableAt;
		this.claimed;
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class Event{
	constructor(){
		this.message;
		this.startDate;
		this.duration;
		this.finished;
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class Guild{
	constructor(){
		
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class PlayerGuild{
	constructor(){
		
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class Group{
	constructor(){
		
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

class PlayerGroup{
	constructor(){
		
	}

	static init(){
		
	}

	static save(){

	}

	static load(){

	}
}

(function init(){
	Player.init();
	Pickaxe.init();
	TypeAction.init();
	TemporalAction.init();
	PlayerTemporalAction.init();
	Loot.init();
	GoldLoot.init();
	PickaxeLoot.init();
	Event.init();
	Guild.init();
	PlayerGuild.init();
	Group.init();
	PlayerGroup.init();
	Player.disconnectAll();
})()

function test(){
	db.resetDatabase(function(newDb){
		db = newDb;
		initAllTables();
		let noli = new Player("Noli", "noli", "alsea");
		Player.save(noli, (err) => {err && console.log(err)});
		Player.save(noli, (err) => {err && console.log(err)});
		Player.load("nick", noli.nick, function(err, player){
			player.gold = 10;
			Player.save(player, err => {err && console.log(arguments)});
		});
	});
}//test();


module.exports.say = client.say;
module.exports.Player = Player;
module.exports.Pickaxe = Pickaxe;
module.exports.TypeAction = TypeAction;
module.exports.TemporalAction = TemporalAction;
module.exports.PlayerTemporalAction = PlayerTemporalAction;
module.exports.Loot = Loot;
module.exports.GoldLoot = GoldLoot;
module.exports.PickaxeLoot = PickaxeLoot;
module.exports.Event = Event;
module.exports.Guild = Guild;
module.exports.PlayerGuild = PlayerGuild;
module.exports.Group = Group;
module.exports.PlayerGroup = PlayerGroup;

